#!/bin/bash
# Iterate over experimental settings and start experiments
source experimentconfig.sh

DATAFOLDER="$EXPERIMENTFOLDER/results/data"

##################################################################################
### Set a value for any parameter in experimentconfig.sh
### USAGE:   config "parameter" value
### EXAMPLE: config "NUMROBOTS" 10 
config() {
	sed -i "s/^export ${1}=.*/export ${1}=${2}/" experimentconfig.sh
}

##################################################################################
### Set a value for any parameter in the loop_params.py dictionaries
### USAGE:   loopconfig "dictionary" "parameter" value
### EXAMPLE: loopconfig "patches" "radius" 0.05 
loopconfig() {
	sed -i "/\['${1}'\]\['${2}'\]/ s/=.*/= ${3}/" loop_functions/loop_params.py
}

##################################################################################
### Copy a configuration from a previously run experiment in the results folder.
### USAGE:   copy "experimentName/configName"
### EXAMPLE: copy "test116_patchy/20_blockchain1"
copy() {
	# Collect the config from results
	cp $DATAFOLDER/experiment_${1}/001/experimentconfig.sh .
	cp $DATAFOLDER/experiment_${1}/001/controller_params.py controllers/
	cp $DATAFOLDER/experiment_${1}/001/loop_function_params.py loop_functions/
}

##################################################################################
### Copy a configuration from a previously run experiment in a remote server.
### USAGE:   import "experimentName/configName"
### EXAMPLE: import "test116_patchy/20_blockchain1"
import() {
	# Collect the config from results
	SSHHOST="eksander@esme"
	SSHSOCKET=~/.ssh/$SSHHOST
	
	ssh -M -f -N -o ControlPath=$SSHSOCKET $SSHHOST
	scp -o ControlPath=$SSHSOCKET $SSHHOST:$DATAFOLDER/experiment_${1}/001/experimentconfig.sh .
	scp -o ControlPath=$SSHSOCKET $SSHHOST:$DATAFOLDER/experiment_${1}/001/controller_params.py controllers/
	scp -o ControlPath=$SSHSOCKET $SSHHOST:$DATAFOLDER/experiment_${1}/001/loop_function_params.py loop_functions/
	ssh -S $SSHSOCKET -O exit $SSHHOST
}

##################################################################################
### Run an experiment for the number of repetitions given in experimentconfig.sh
### USAGE:   run "experimentName/configName"
### EXAMPLE: run "test116_patchy/20_blockchain1"
run() {

	# Configure experiment
	. experimentconfig.sh

	# If is a testrun
	if  [[ $2 = "--test" || $2 = "-t" ]]; then
		echo "Running test ${1}"
		. starter -r -s

	else
		for REP in $(seq 1 ${REPS}); do
			echo "Runing experiment ${1}"

			# Perform experiment
			. starter -r -sz

			# Collect data
			if [ $# -eq 1 ]; then
			    bash collect-logs ${1}
			fi
			
		done
	fi
}


# DEFINE EXPERIMENT
EXP=varyutil2
config "REPS" 5
config "LENGTH" 5000
config "NOTES" "\"Variation of utility of the resource between 100 and 400\""

for UTIL in $(seq 100 50 400); do 
	CFG=${UTIL}
	loopconfig "patches" "utility" "{'red': 1, 'green':  1, 'blue': ${UTIL}, 'yellow': 1}"
	wait
	run    "${EXP}/${CFG}"
done


# # DEFINE CONFIGURATION 1
# CFG=linear_20
# 

# wait
# run    "${EXP}/${CFG}"


# DEFINE CONFIGURATION 1
# CFG=linear_20_limassign_0_regen_10
# config "LIMITASSIGN" 0
# config "NOTES" "\"Testing maxload 12 and new resource regen/forage; limassign 50 vs limassign 0; regen 5 vs regen 10\""

# wait
# run    "${EXP}/${CFG}"





# EXP=115_patch_size

# config "REPS" 3
# config "NUM1" 10

# #-----------------------
# config "SCNAME" "resource_market_limit" 
# config "MAXWORKERS" 2

# declare -a arr=(0.20 0.16 0.12 0.08 0.04)
# for patch_radius in "${arr[@]}"; do 
# 	loopconfig "patches" "radius" patch_radius	
# 	wait
# 	run    "${EXP}/limit_2" $1
# done	

# #-----------------------
# config "SCNAME" "resource_market_egreedy" 
# config "EPSILON" 50

# declare -a arr=(0.20 0.16 0.12 0.08 0.04)
# for patch_radius in "${arr[@]}"; do 
# 	loopconfig "patches" "radius" patch_radius	
# 	wait
# 	run    "${EXP}/egreedy_50" $1
# done

# #-----------------------
# config "SCNAME" "resource_market_egreedy"

# CFG=limit_3
# config "EPSILON" 50
# wait
# run    "${EXP}/${CFG}" $1

# CFG=egreedy_20
# config "EPSILON" 20
# wait
# run    "${EXP}/${CFG}"


# for EPSILON in $(seq 0 10 100); do 
# 	CFG=egreedy_${EPSILON}
# 	config "EPSILON" ${EPSILON}
# 	wait
# 	run    "${EXP}/${CFG}"
# done
